{"version":3,"sources":["webpack:///src/app/Shared/shared.service.ts","webpack:///src/environments/environment.ts","webpack:///src/app/Shared/Constants/ColourList.ts","webpack:///src/app/wheel-colour/wheel-colour.component.ts","webpack:///src/app/wheel-colour/wheel-colour.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["SharedService","Promise","resolve","environment","production","ColourList","WheelColourComponent","sharedService","color","event","heading","show","colourList","getColourList","getColours","then","emit","AppComponent","service","backgroundColor","SetColor","AppModule","bootstrapModule","err","console","error","webpackEmptyAsyncContext","req","e","Error","code","keys","module","exports","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { ColourList } from './Constants/ColourList';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SharedService {\n\n  constructor() { }\n\n  getColours(): Promise<string[]> {\n    return Promise.resolve(ColourList);\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","\nexport const ColourList: string[] = [\n  '#EE0000',\n  '#CD00CD',\n  '#9F79EE',\n  '#A020F0',\n  '#6495ED',\n  '#98F5FF',\n  '#55AE3A',\n  '#4CBB17',\n  '#FBDB0C',\n  '#EEDD82',\n  '#F0A804',\n  '#E38217',\n\n];\n","import { Component, EventEmitter, Input, Output , OnInit} from '@angular/core';\nimport {SharedService} from '../Shared/shared.service';\n\n@Component({\n  selector: 'app-wheel-colour',\n  templateUrl: './wheel-colour.component.html',\n  styleUrls: ['./wheel-colour.component.scss']\n})\nexport class WheelColourComponent implements OnInit {\n\n  @Input() color = '';\n  @Output() event: EventEmitter<string> = new EventEmitter<string>();\n\n  public heading = 'Select a colour';\n  public show = false;\n  public colourList: string[] = [];\n\n\n  constructor(public sharedService: SharedService) { }\n\n  ngOnInit() {\n    this.getColourList();\n  }\n\n  getColourList(): void {\n    this.sharedService.getColours().then(colourList => this.colourList = colourList);\n  }\n\n  public changeColor(color: string): void {\n    this.color = color;\n    this.event.emit(this.color);\n    this.show = true;\n    this.heading = 'Selected Colour';\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"selected-slice-info\">\n    <div class=\"hex-code\">\n      <p class=\"style\">{{ heading }}</p>\n      <br />\n      <div>\n        <p *ngIf=\"show\" class=\"style-value\">Hex Code: {{ color }}</p>\n      </div>\n    </div>\n    <div\n      *ngIf=\"show\"\n      class=\"selectedColour\"\n      [ngStyle]=\"{ background: color }\"\n    ></div>\n  </div>\n\n  <div class=\"wheel-shape-block block\">\n    <ul class=\"wheel-shape\">\n      <li *ngFor=\"let paint of colourList\">\n        <div\n          (click)=\"changeColor(paint)\"\n          [ngStyle]=\"{ background: paint }\"\n          class=\"slice\"\n        ></div>\n      </li>\n      <div class=\"inner\"></div>\n    </ul>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport {SharedService} from '../app/Shared/shared.service'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  constructor(private service: SharedService){}\n\n  public backgroundColor = '#fff';\n\n  public SetColor(color: string) {\n    this.backgroundColor = color;\n  }\n}\n","<div class=\"app\">\n  <div class=\"container main-content\">\n    <app-wheel-colour\n      [color]=\"backgroundColor\"\n      (event)=\"SetColor($event)\"\n    ></app-wheel-colour>\n  </div>\n</div>\n<!--  -->\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { WheelColourComponent } from './wheel-colour/wheel-colour.component';\nimport {SharedService} from '../app/Shared/shared.service'\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    WheelColourComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [SharedService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}